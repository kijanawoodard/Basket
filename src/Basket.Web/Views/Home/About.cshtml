@{
    ViewBag.Title = "Test";
}
<h2>@ViewBag.Title.</h2>
<!--<h3>@ViewBag.Message</h3>

<p>Use this area to provide additional information.</p>-->
<hr/>
<h3>text</h3>
<a href="sms:?body=join my geo party!!!">Tap to party!</a>

<h4>Oh Apple</h4>
<a href="sms:&body=join my geo party!!!">Tap to party!</a>

<hr/>
<h3>Live Video</h3>
<video autoplay></video><br/>

<hr/>
<h3>Output</h3>
<div>
    <img src="" width="160" height="120">
    <div id="output"></div>
</div>
<canvas style="display:none;" width="640" height="480"></canvas>


<hr/>
<h3>Raw</h3>
<div id='editableDiv' contenteditable='true'>Show</div>

<hr/>
<div contenteditable='true'>Paste area</div>
<script>
    function handlePaste(e) {
        var clipboardData, pastedData;
        console.log(1234)
        // Stop data actually being pasted into div
        e.stopPropagation();
        e.preventDefault();

        // Get pasted data via clipboard API
        clipboardData = e.clipboardData || window.clipboardData;
        pastedData = clipboardData.getData('Text');

        // Do whatever with pasteddata
        //alert(pastedData);
        document.getElementById('editableDiv').innerText = pastedData;
    }

    var data = "";
    var last = {};

    function handleKeydown(e) {
        //console.log(e);
        if (e.key === "Shift" || e.key === "Control") {
            e.stopPropagation();
            e.preventDefault();
            return false;
        };

        if (e.shiftKey && e.ctrlKey && e.key === 'J') {
            last = e;
            data += "\r";
            e.stopPropagation();
            e.preventDefault();
            return true;
        };

        if (e.keyCode === 13) {
            if (last.keyCode === 13) {
                document.getElementById('editableDiv').innerText = data;
                parse(data);
                data = "";
            }

            last = e;
            return true;
        }

        last = e;
        data += e.key;
        return true;
    }

    function parse(data) {
        var lastname = "", firstname = "", birthday = "", address = "", city = "", state = "", zip = "", dl = "";
        var lines = data.split('\r');
        for (var i = 0; i < lines.length; i++) {
            var line = lines[i];

            switch (line.substring(0, 3)) {
            case "DCS":
                lastname = line.substring(3);
                break;
            case "DCT":
                firstname = line.substring(3);
                break;
            case "DBB":
                birthday = line.substring(3);
                break;
            case "DAG":
                address = line.substring(3);
                break;
            case "DAI":
                city = line.substring(3);
                break;
            case "DAJ":
                state = line.substring(3);
                break;
            case "DAK":
                zip = line.substring(3);
                break;
            case "DAQ":
                dl = line.substring(3);
                break;
            default:
            }
        }

        var output = "Name: " + firstname + " " + lastname + "<br/>" +
            "Date of Birth: " + birthday + "<br/>" +
            "Address: " + address + " " + city + " " + state + " " + zip + "<br/>" +
            "DL #: " + dl;
        document.getElementById('output').innerHTML = output;
        document.querySelector('video').click();
    }

    document.body.addEventListener('paste', handlePaste);
    document.body.addEventListener('keydown', handleKeydown);
</script>
<script>
    /*
 *    Copyright (c) 2010 Tobias Schneider
 *    This script is freely distributable under the terms of the MIT license.
 */

    (function () {
        var UPC_SET = {
            "3211": '0',
            "2221": '1',
            "2122": '2',
            "1411": '3',
            "1132": '4',
            "1231": '5',
            "1114": '6',
            "1312": '7',
            "1213": '8',
            "3112": '9'
        };

        getBarcodeFromImage = function (imgOrId) {
            var doc = document,
                img = "object" == typeof imgOrId ? imgOrId : doc.getElementById(imgOrId),
                canvas = doc.createElement("canvas"),
                ctx = canvas.getContext("2d"),
                width = img.width,
                height = img.height,
                spoints = [1, 9, 2, 8, 3, 7, 4, 6, 5],
                numLines = spoints.length,
                slineStep = height / (numLines + 1);
            canvas.width = width;
            canvas.height = height;
            ctx.drawImage(img, 0, 0);
            while (numLines--) {
                console.log(spoints[numLines]);
                var pxLine = ctx.getImageData(0, slineStep * spoints[numLines], width, 2).data,
                    sum = [],
                    min = 0,
                    max = 0;
                for (var row = 0; row < 2; row++) {
                    for (var col = 0; col < width; col++) {
                        var i = ((row * width) + col) * 4,
                            g = ((pxLine[i] * 3) + (pxLine[i + 1] * 4) + (pxLine[i + 2] * 2)) / 9,
                            s = sum[col];
                        pxLine[i] = pxLine[i + 1] = pxLine[i + 2] = g;
                        sum[col] = g + (undefined == s ? 0 : s);
                    }
                }
                for (var i = 0; i < width; i++) {
                    var s = sum[i] = sum[i] / 2;
                    if (s < min) { min = s; }
                    if (s > max) { max = s; }
                }
                var pivot = min + ((max - min) / 2),
                    bmp = [];
                for (var col = 0; col < width; col++) {
                    var matches = 0;
                    for (var row = 0; row < 2; row++) {
                        if (pxLine[((row * width) + col) * 4] > pivot) { matches++; }
                    }
                    bmp.push(matches > 1);
                }
                var curr = bmp[0],
                    count = 1,
                    lines = [];
                for (var col = 0; col < width; col++) {
                    if (bmp[col] == curr) { count++; }
                    else {
                        lines.push(count);
                        count = 1;
                        curr = bmp[col];
                    }
                }
                var code = '',
                    bar = ~~((lines[1] + lines[2] + lines[3]) / 3),
                    u = UPC_SET;
                for (var i = 1, l = lines.length; i < l; i++) {
                    if (code.length < 6) { var group = lines.slice(i * 4, (i * 4) + 4); }
                    else { var group = lines.slice((i * 4) + 5, (i * 4) + 9); }
                    var digits = [
                        Math.round(group[0] / bar),
                        Math.round(group[1] / bar),
                        Math.round(group[2] / bar),
                        Math.round(group[3] / bar)
                    ];
                    code += u[digits.join('')] || u[digits.reverse().join('')] || 'X';
                    if (12 == code.length) { return code; break; }
                }
                if (-1 == code.indexOf('X')) { return code || false; }
            }
            return false;
        }
    })();
</script>
<script>
    var video = document.querySelector('video');
    var canvas = document.querySelector('canvas');
    var ctx = canvas.getContext('2d');
    var localMediaStream = null;

    navigator.getUserMedia = navigator.getUserMedia ||
        navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

    var constraints = {
        audio: false,
        video: true
    };
    var video = document.querySelector('video');

    function successCallback(stream) {
        window.stream = stream; // stream available to console
        if (window.URL) {
            video.src = window.URL.createObjectURL(stream);
        } else {
            video.src = stream;
        }
        localMediaStream = stream;
    }

    function errorCallback(error) {
        console.log('navigator.getUserMedia error: ', error);
    }

    navigator.getUserMedia(constraints, successCallback, errorCallback);

    function snapshot() {
        if (localMediaStream) {
            ctx.drawImage(video, 0, 0, 640, 480);
            // "image/webp" works in Chrome.
            // Other browsers will fall back to image/png.
            document.querySelector('img').src = canvas.toDataURL('image/png');
            var barcode = getBarcodeFromImage(document.querySelector('img'));
            console.log(barcode);
        }
    }

    video.addEventListener('click', snapshot, false);

    // Not showing vendor prefixes or code that works cross-browser.
/*  navigator.getUserMedia({video: true}, function(stream) {
    video.src = window.URL.createObjectURL(stream);
    localMediaStream = stream;
  }, errorCallback);*/
</script>